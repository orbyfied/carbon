group 'com.github.orbyfied.carbon'
version '0.1.0'

/*
    DEPENDENCIES
 */

ext {
    sourceServer = Path.of("C:\\Users\\atomf\\Desktop\\games\\Minecraft Testing\\testing_server_1.18.1");

    // the libraries minecraft uses
    minecraftLibraries = new FolderArtifacts(
            sourceServer.resolve("libraries"),
            new MinecraftLibraryArtifactResolver()
    )
}

def mclib(String src) {
    return files(project.minecraftLibraries.find(src));
}

/*
    DEPENDENCY MANAGEMENT LIBRARY
 */

static void println(Object o) {
    System.out.println(o);
}

import java.nio.file.Path

interface ArtifactResolver {

    Path getArtifact(String s);

}

class FolderArtifactResolver implements ArtifactResolver {

    Path repo;
    FolderArtifactResolver delegate;

    FolderArtifactResolver(Path repo) {
        this.repo = repo;
    }

    FolderArtifactResolver(Path repo, FolderArtifactResolver delegate) {
        this(repo);
        this.delegate = delegate;
    }

    FolderArtifactResolver(String repo) {
        this(Path.of(repo));
    }

    FolderArtifactResolver(String repo, FolderArtifactResolver delegate) {
        this(Path.of(repo), delegate);
    }

    @Override
    Path getArtifact(String src) {
        String[] components = src.split(":");
        if (components.length < 3)
            throw new IllegalArgumentException("invalid artifact identifier: " + src);
        String group   = components[0];
        String id      = components[1];
        String version = components[2];

        String spec = null;
        if (components.length > 3)
            spec = components[3];

        return traverse(repo, group, id, version, spec);
    }

    Path traverse(Path root, String group, String id, String version, String spec) {
        if (delegate == null)
            throw new IllegalStateException()
        return delegate.traverse(root, group, id, version, spec);
    }

    String getFileName(String group, String id, String version, String spec) {
        if (delegate == null)
            throw new IllegalStateException()
        return delegate.getFileName(group, id, version, spec);
    }

}

class MinecraftLibraryArtifactResolver extends FolderArtifactResolver {
    MinecraftLibraryArtifactResolver() {
        super(null, null);
    }

    @Override
    Path traverse(Path root, String group, String id, String version, String spec) {
        Path cur = root;
        String[] groupComponents = group.split("\\.");
        for (String s : groupComponents)
            cur = cur.resolve(s);
        cur = cur.resolve(id).resolve(version);
        return cur.resolve(getFileName(group, id, version, spec));
    }

    @Override
    String getFileName(String group, String id, String version, String spec) {
        return id + "-" + version + (spec != null ? "-" + spec : "") + ".jar";
    }
}

class MinecraftVersionArtifactResolver extends FolderArtifactResolver {
    MinecraftVersionArtifactResolver() {
        super(null, null);
    }

    @Override
    Path traverse(Path root, String group, String id, String version, String spec) {
        return root.resolve(version).resolve(getFileName(group, id, version, spec))
    }

    @Override
    String getFileName(String group, String id, String version, String spec) {
        String s = group + "-" + version;
        if (id != "all")
            s += "-" + id;
        return s + ".jar";
    }
}

class FolderArtifacts {

    Path folder;
    FolderArtifactResolver resolver;

    FolderArtifacts(Path folder, FolderArtifactResolver res) {
        this.folder = folder;
        this.resolver = new FolderArtifactResolver(folder, res)
    }

    FolderArtifacts(String folder) {
        this(Path.of(folder));
    }

    String getFolder() {
        return folder;
    }

    FolderArtifactResolver getResolver() {
        return resolver
    }

    File find(String src) {
        File f = resolver.getArtifact(src).toFile();
        println("-> " + src + ": " + f);
        return f;
    }

}