import org.apache.commons.io.Charsets

import java.nio.charset.StandardCharsets

plugins {
    id 'java' // java

    // for shading in dependencies
    id "com.github.johnrengelman.shadow" version "7.1.2"

    // for minecraft lol
    id "io.papermc.paperweight.userdev" version "1.3.5"
}

ext {
    // muy importante or something
    minecraftVersion = "1.18.2"
}

// Properties
group   rootProject.group
version rootProject.version

// Task Configuration

java {
    // Configure the java toolchain. This allows gradle to auto-provision JDK 17 on systems that only have JDK 8 installed for example.
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

tasks {

    // configure reobfJar to run when invoking the build task
    assemble {
        dependsOn(reobfJar) }
    build {
        dependsOn(reobfJar) }

    compileJava {
        options.encoding = Charsets.UTF_8.name()
        options.release.set(17) }
    javadoc {
        options.encoding = Charsets.UTF_8.name() }
    processResources {
        filteringCharset = Charsets.UTF_8.name() }

    reobfJar {
        // set jar format
        final String format = "carbon-${project.minecraftVersion}+${project.version}.jar"
        outputJar.set(layout.buildDirectory.file("libs/" + format))
    }
}

processResources {

    doFirst {

        // replace placeholders for epicness
        // (and streamlining) but mostly epicness
        // (and other processing)
        filesNotMatching([
                // media
                '**/*.png',
                '**/*.ogg',
                '**/*.wav',
                '**/*.mp3',

                // compiled
                '**/*.jar',
                '**/*.class'
        ] as Iterable<String>) {
            // expand placeholders
            def placeholders = [
                    'carbonProjectVersion' : project.version
            ]

            // filter for placeholder expansion
            // From: https://stackoverflow.com/questions/17274107/how-to-expand-property-references-in-jar-resources
            filter { String line ->
                line.findAll(/\$\$\{([a-z,A-Z,0-9,\.]+)\}/).each {
                    // get the key from the expression
                    String key      = it.replace("\$\${", "").replace("}", "")
                    String keyParts = key.split("\\.");

                    // iterate over key
                    Object currentValue = placeholders;
                    for (String keyPart : keyParts) {
                        System.out.println(currentValue.getClass())

                        // check if we can continue
                        if (!(currentValue instanceof Map)) {
                            System.out.println("[WARN] Could not resolve property for key: " + key)
                            return;
                        }

                        // get next value
                        currentValue = ((Map<String,Object>)currentValue).get(keyPart);
                    }

                    if (currentValue != null) {
                        // replace
                        line = line.replace(it, currentValue)
                    } else System.out.println("[WARN] No property defined for key: " + key)
                }

                // return line
                line
            }
        }
    }

}

// Dependency Management

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {

    // Minecraft
    paperweightDevelopmentBundle("io.papermc.paper:dev-bundle:1.18.2-R0.1-SNAPSHOT")

    // Modules
    implementation project(":carbon-core")

    implementation project(":carbon-event")
    implementation project(":carbon-process")
    implementation project(":carbon-util")
    implementation project(":carbon-config")
    implementation project(":carbon-command")
    implementation project(":carbon-registry")

}

shadowJar {
    // relocate BStats into the right directory
    relocate 'org.bstats', 'com.github.orbyfied.carbon.vendor.bstats'
}