import org.apache.commons.io.Charsets

plugins {
    id 'java' // java

    // for shading in dependencies
    id "com.github.johnrengelman.shadow" version "7.1.2"

    // for minecraft lol
    id ("io.papermc.paperweight.userdev") version "1.3.5"
}

// Properties
group   rootProject.group
version rootProject.version

java {
    // Configure the java toolchain. This allows gradle to auto-provision JDK 17 on systems that only have JDK 8 installed for example.
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

// Task Configuration

tasks {

    assemble {
        dependsOn(shadowJar, reobfJar) }

    compileJava {
        options.encoding = Charsets.UTF_8.name()
        options.release.set(17) }
    javadoc {
        options.encoding = Charsets.UTF_8.name() }
    processResources {
        filteringCharset = Charsets.UTF_8.name() }


}

processResources {
    // replace placeholders for epicness
    // (and streamlining) but mostly epicness
    // (and other processing)
    filesNotMatching([
            // media
            '**/*.png',
            '**/*.ogg',
            '**/*.wav',
            '**/*.mp3',

            // compiled
            '**/*.jar',
            '**/*.class'
    ] as Iterable<String>) {
        // expand placeholders
        def placeholders = [
                'carbonProjectVersion' : project.version
        ]

        // filter for placeholder expansion
        // From: https://stackoverflow.com/questions/17274107/how-to-expand-property-references-in-jar-resources
        filter { String line ->
            line.findAll(/\$\$\{([a-z,A-Z,0-9,\.]+)\}/).each {
                // get the key from the expression
                String key      = it.replace("\$\${", "").replace("}", "")
                String keyParts = key.split("\\.");
                System.out.println(keyParts)

                // iterate over key
                Object currentValue = placeholders;
                for (String keyPart : keyParts) {
                    // check if we can continue
                    if (!(currentValue instanceof Map)) {
                        System.out.println("[WARN] Could not resolve property for key: " + key)
                        return;
                    }

                    // get next value
                    currentValue = ((Map<String,Object>)currentValue).get(keyPart);
                }

                if (currentValue != null) {
                    // replace
                    line = line.replace(it, currentValue)
                } else System.out.println("[WARN] No property defined for key: " + key)
            }

            // return line
            line
        }
    }
}

// Dependencies

repositories {
    mavenCentral()
    mavenLocal()

    // tried to use mixins lol
    maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
}

dependencies {

    // Minecraft
    paperweightDevelopmentBundle("io.papermc.paper:dev-bundle:1.18.2-R0.1-SNAPSHOT")

    // TODO: may separate it later
    //  Modules
    implementation project(":carbon-event")
    implementation project(":carbon-process")
    implementation project(":carbon-util")
    implementation project(":carbon-config")
    implementation project(":carbon-command")
    implementation project(":carbon-registry")

    // External Libraries
    implementation 'org.bstats:bstats-bukkit:3.0.0'

    compileOnly 'org.zeroturnaround:zt-zip:1.15'
    compileOnly 'org.javassist:javassist:3.28.0-GA'

}

shadowJar {
    // relocate BStats into the right directory
    relocate 'org.bstats', 'com.github.orbyfied.carbon.vendor.bstats'
}